{"version":3,"file":"static/webpack/static/development/pages/dice.js.02deb809c9f980569ca1.hot-update.js","sources":["webpack:///./pages/dice/m.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport uuid from 'uuid/v4';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {\n  OddsInfo,\n  DiceInfo,\n  GameResultModal,\n  DiceRollingModal,\n  Bottom,\n} from '../../components/dice';\nimport { ActionButton, AppNavBar, Loader, LoadingModal } from '../../components/common';\nimport Head from '../../components/head';\nimport Container from '../../components/base-container';\nimport HeaderStatus from '../../components/header-status';\nimport ContractObserver from '../../libs/contract-observer';\n\nimport t from '../../libs/i18n-util';\nimport colors from '../../libs/styleguide/colors';\nimport EosClient from '../../libs/eos-client';\n\nimport { actions, selectors } from '../../redux';\n\nconst styles = {\n  betButton: {\n    height: 48,\n    fontSize: 18,\n    textAlign: 'center',\n    color: colors.darkGrey\n  },\n};\n\n/** @type {EosClient} */\nconst eosClient = EosClient.getInstance();\n\n@connect(({ dice, account, myBalance }) => ({ dice, account, myBalance }))\nclass Dice extends React.Component {\n  state = {\n    gameResultModal: false,\n    betreceipt: {},\n    loadingModal: false,\n  }\n\n  startBet = async () => {\n    this.setState({ loadingModal: true });\n    let resolve = null;\n    let reject = null;\n    const promise = new Promise((_resolve, _reject) => {\n      [resolve, reject] = [_resolve, _reject];\n    });\n\n    const rollUnder = selectors.getRollUnder(this.props);\n    const betAmount = selectors.getBetAmount(this.props);\n\n    const betClientId = uuid();\n    const quantity = `${parseFloat(betAmount).toFixed(4)} EOS`;\n\n    try {\n      const trx = await eosClient.diceBet(quantity, rollUnder, betClientId);\n      this.props.dispatch(actions.rollDice(betClientId));\n      // eslint-disable-next-line\n      console.log(`Transaction ID: ${trx.transaction_id}`);\n      this.setState({ loadingModal: false });\n    } catch (error) {\n      this.setState({ loadingModal: false });\n      reject(error);\n    }\n\n    const intervalId = setInterval(async () => {\n      const betreceiptsFromChain = await eosClient.diceLatestBetreceipts();\n      for (let betreceipt of betreceiptsFromChain) {\n        if (betreceipt.betMemo === betClientId) {\n          this.props.dispatch(actions.rollFinished(betreceipt));\n          this.setState({\n            gameResultModal: true,\n            betreceipt,\n          });\n          clearInterval(intervalId);\n          resolve(betreceipt);\n          break;\n        }\n      }\n    }, 300);\n    return promise;\n  }\n\n  startAutoBet = async () => {\n    const betreceipt = await this.startBet();\n    const autoBet = selectors.diceAutoBet(this.props);\n    if (autoBet) {\n      return this.startAutoBet();\n    } else {\n      return betreceipt;\n    }\n  }\n\n  handleBetButton = async () => {\n    try {\n      const betreceipt = await this.startBet();\n      console.log('[onBetResult]', betreceipt);\n      const myBalance = await eosClient.getMyBalance();\n      this.props.dispatch(actions.updateMyBalance(myBalance));\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  handleModalClose = name => () => {\n    this.setState({\n      [name]: false,\n    });\n  }\n\n  componentDidMount() {\n    const contractObserver = ContractObserver.getInstance();\n    contractObserver.onAccount((error, account) => {\n      if (error) {\n        // eslint-disable-next-line\n          return console.error(error);\n      }\n      if (account && _.isEqual(account, selectors.account(this.props)) === false) {\n        this.props.dispatch(actions.updateAccount(account));\n      }\n    });\n\n    contractObserver.onDice((error, result) => {\n      if (error) {\n        // eslint-disable-next-line\n        return console.error(error);\n      }\n      const { gameGlobal } = result;\n      if (_.isEqual(selectors.getDiceGameGlobal(this.props), gameGlobal) === false) {\n        this.props.dispatch(actions.diceUpdateGameGlobal(gameGlobal));\n      }\n    }, 60 * 1000);\n  }\n\n  componentWillReceiveProps (newProps) {\n    const newAutoBet = selectors.diceAutoBet(newProps);\n    const autoBet = selectors.diceAutoBet(this.props);\n    const { isRolling } = selectors.getBetStatus(this.props) || {};\n    if (newAutoBet && !autoBet && !isRolling) {\n      this.startAutoBet();\n    }\n  }\n\n  render() {\n    const rollUnder = selectors.getRollUnder(this.props);\n    const betStatus = selectors.getBetStatus(this.props);\n\n    return (\n      <Loader>\n        <Head title=\"Dice\" />\n        <AppNavBar gameType=\"dice\" betsHref=\"/dice/bets\"/>\n        <br />\n        <Container>\n          <HeaderStatus gameType='dice'/>\n        </Container>\n        <br />\n        <Container>\n          <OddsInfo currentBetNumber={rollUnder} />\n        </Container>\n        <br />\n        <Container>\n          <DiceInfo/>\n        </Container>\n        <br />\n        <Container>\n          <ActionButton style={styles.betButton} onClick={this.handleBetButton}>\n            {t('start_betting')}\n          </ActionButton>\n        </Container>\n        <DiceRollingModal\n          open={betStatus.isRolling}\n        />\n        <GameResultModal\n          open={this.state.gameResultModal}\n          betreceipt={this.state.betreceipt}\n          onClick={this.handleModalClose('gameResultModal')}\n        />\n        <br/>\n        <Container background={false}>\n          <Bottom/>\n        </Container>\n        <LoadingModal open={this.state.loadingModal} onClose={this.handleModalClose('loadingModal')}/>\n        {/* <ScatterChecker/> */}\n      </Loader>\n    );\n  }\n}\n\nDice.propTypes = {\n  dispatch: PropTypes.func,\n  classes: PropTypes.object,\n};\n\nexport default withStyles(styles)(Dice);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AACA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AAHA;AACA;;;;;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAZA;AAAA;AAAA;AACA;AADA;AAeA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AApBA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAoBA;AAAA;AAAA;AACA;AAAA;AACA;AAvBA;AAyBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AAFA;AACA;AAGA;AACA;AAVA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAzBA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AA0CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AAAA;AACA;AANA;AAAA;AACA;AADA;AAAA;AAAA;AAOA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAUA;AAAA;AACA;AAGA;AAJA;AACA;;;;;;AAKA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;AAKA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AAHA;AAAA;AACA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAIA;AAAA;AAQA;AAAA;AAAA;AAKA;AADA;AAIA;AACA;AACA;AAHA;AAMA;AAAA;AAGA;AAAA;AAAA;AAIA;;;;AAxJA;AA2JA;AACA;AACA;AAFA;AAKA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}