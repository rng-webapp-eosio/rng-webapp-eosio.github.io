{"version":3,"file":"static/webpack/static/development/pages/dice.js.ef72b0347727158129ec.hot-update.js","sources":["webpack:///./libs/eos-client.js"],"sourcesContent":["import ScatterJS from 'scatterjs-core';\nimport ScatterEOS from 'scatterjs-plugin-eosjs2';\nimport jsCookie from 'js-cookie';\n\nimport fetch from 'node-fetch';\nimport { JsonRpc, Api as EosApi } from 'eosjs';\nimport _ from 'lodash';\n\nimport { currentBetToBetreceipt } from '../libs/format-helper';\nimport { clientOnly } from '../libs/decorators';\nimport config from '../config';\n\n// Don't forget to tell ScatterJS which plugins you are using.\nScatterJS.plugins(new ScatterEOS());\n\nconst { network, contract, app } = config;\n\nlet instance = null;\n\nclass EosClient {\n\n  contract = null;\n  account = null;\n  initPromise = null;\n\n  /** @type {WebSocket} */\n  scatterSocket = null;\n\n  /** @type {ScatterJS.scatter} */\n  scatter = null\n\n  /** @type {EosApi} */\n  eos = null;\n\n  /** @type {JsonRpc} */\n  rpc = null;\n\n  /** @type {boolean} */\n  connected = false\n\n  /** @type {boolean} */\n  hasScatter = false\n\n  /**\n   * @returns {EosClient}\n   */\n  static getInstance () {\n    if (instance === null) {\n      instance = new EosClient();\n    }\n    return instance;\n  }\n\n  constructor() {\n    this.contract = contract;\n    this.account = jsCookie.getJSON('chain.account');\n    this.rpc = new JsonRpc(`${network.protocol}://${network.host}:${network.port}`, { fetch });\n\n    const host = '127.0.0.1:50005';\n\n    if (typeof WebSocket !== 'undefined') {\n      this.scatterSocket = new WebSocket(`wss://${host}/socket.io/?EIO=3&transport=websocket`);\n\n      this.scatterSocket.onopen = () => {\n        console.log('[scatterSocket]', 'onopen');\n        this.scatterSocket.send('40/scatter');\n      };\n\n      this.scatterSocket.onmessage = msg => {\n        console.log('[scatterSocket]', 'onmessage', msg);\n        const { isTrusted, data } = msg;\n        if (isTrusted && data === '42/scatter,[\"connected\"]') {\n          this.hasScatter = true;\n        }\n      };\n\n      this.scatterSocket.onerror = event => {\n        console.log('[scatterSocket]', 'onerror', event);\n      };\n    }\n\n  }\n\n  async waitInit() {\n    if (this.initPromise === null) {\n      this.initPromise = this.init();\n      return this.initPromise;\n    }\n    return this.initPromise;\n  }\n\n  async init() {\n    this.connected = await ScatterJS.scatter.connect(app.name);\n\n    // If the user does not have Scatter or it is Locked or Closed this will return false;\n    if (!this.connected) return this;\n\n    this.scatter = ScatterJS.scatter;\n\n    // Now we need to get an identity from the user.\n    // We're also going to require an account that is connected to the network we're using.\n    const requiredFields = { accounts: [network] };\n    await this.scatter.getIdentity(requiredFields);\n\n    // Always use the accounts you got back from Scatter. Never hardcode them even if you are prompting\n    // the user for their account name beforehand. They could still give you a different account.\n    this.account = this.scatter.identity.accounts.find(x => x.blockchain === 'eos');\n\n    // Store account\n    jsCookie.set('chain.account', this.account, { expires: 14 });\n\n    // Get a proxy reference to eosjs which you can use to sign transactions with a user's Scatter.\n    this.eos = this.scatter.eos(network, EosApi, { rpc: this.rpc, beta3: true });\n\n    // ----------------------------\n    // Now that we have an identity,\n    // an EOSIO account, and a reference\n    // to an eosjs object we can send a transaction.\n    // ----------------------------\n\n    // Never assume the account's permission/authority. Always take it from the returned account.\n    this.transactionOptions = {\n      authorization: [{\n        actor: this.account.name,\n        permission: this.account.authority,\n      }],\n    };\n\n    if (typeof window !== 'undefined') {\n      window.ScatterJS = null;\n    }\n    return this;\n  }\n\n  async getResources(accountName) {\n    const account = await this.rpc.get_account(accountName);\n    const { ram_quota, ram_usage, net_limit, cpu_limit } = account;\n    return {\n      ram: {\n        quota: ram_quota,\n        usage: ram_usage,\n      },\n      cpu: cpu_limit,\n      net: net_limit,\n    };\n  }\n\n\n  @clientOnly(null)\n  async getMyBalance() {\n    let account = this.account;\n\n    if (_.isNil(account)) {\n      account = jsCookie.getJSON('chain.account');\n    }\n    if (_.isNil(account)) {\n      await this.initPromise;\n      account = this.account;\n    }\n    if (_.isNil(account)) {\n      console.error('[eos-client.getMyBalance]','account is nil');\n      throw new Error('account is nil. Is scatter installed ?');\n    }\n\n    const result = await this.rpc.get_currency_balance('eosio.token', account.name, 'EOS');\n\n    return result[0];\n  }\n\n  /**\n   * @param {('dice'|'baccarat'|'pk-10')} gameType\n   */\n  async gameGlobal(gameType) {\n    const result = await this.rpc.get_table_rows({\n      json: true,\n      code: this.contract[gameType],\n      scope: this.contract[gameType],\n      table: 'global',\n      limit: 1,\n    });\n    return _.get(result, 'rows[0]');\n  }\n\n  /**\n   * @param {('dice'|'baccarat'|'pk-10')} gameType\n   */\n  async currentBets(gameType) {\n    const result = await this.rpc.get_table_rows({\n      json: true,\n      code: this.contract[gameType],\n      scope: this.contract[gameType],\n      table: 'bets',\n      limit: 100,\n    });\n    const bets = _.get(result, 'rows', []);\n    return bets.map(bet => currentBetToBetreceipt(bet)).reverse();\n  }\n\n  async diceLatestBetreceipts(offset = 5) {\n    let { actions } = await this.rpc.history_get_actions(this.contract.dice, -1, -offset);\n\n    let betreceipts = actions.filter(item => _.get(item, 'action_trace.act.name') === 'betreceipt');\n    return betreceipts.map(betreceipt =>  {\n      const {\n        bet_id: betId,\n        bet_memo: betMemo,\n        random_roll: randomRoll,\n        bettor,\n        item,\n        payout,\n        wager,\n      } =  _.get(betreceipt, 'action_trace.act.data', {});\n      return {\n        betId, betMemo, bettor, item, payout, wager, randomRoll\n      };\n    });\n  }\n\n  async baccaratGameResult(gameId) {\n    const contract = this.contract.baccarat;\n    const rawResult = await this.rpc.get_table_rows({\n      json: true,\n      code: contract,\n      scope: contract,\n      table: 'games',\n      limit: 1,\n      lower_bound: gameId,\n      upper_bound: gameId,\n    });\n\n    const { result, ...rest } = _.get(rawResult, 'rows[0]', {});\n    return Object.assign({}, result, rest);\n  }\n\n  async diceBet(quantity, rollUnder, betMemo) {\n    await this.waitInit();\n    const memo = `action:bet,item:${rollUnder},user_seed:testsetset,bet_memo:${betMemo}`;\n    const result = await this.eos.transact({\n      actions: [{\n        account: 'eosio.token',\n        name: 'transfer',\n        authorization: this.transactionOptions.authorization,\n        data: {\n          from: this.account.name,\n          to: this.contract.dice,\n          quantity,\n          memo,\n        },\n      }]\n    }, {\n      blocksBehind: 3,\n      expireSeconds: 30,\n    });\n\n    return result;\n  }\n\n  async baccaratBet(quantity, referrer, item) {\n    await this.waitInit();\n    const gameConfig = (await this.gameGlobal('baccarat')).game_config;\n    const roundId = gameConfig.round_id;\n    const gameId = gameConfig.game_id;\n    const betMemo = 'qwert1234'; // TODO\n\n    const memo = `round_id:${roundId},game_id:${gameId},referrer:${referrer},action:bet,item:${item},bet_memo:${betMemo}`;\n    const result = await this.eos.transact({\n      actions: [{\n        account: 'eosio.token',\n        name: 'transfer',\n        authorization: this.transactionOptions.authorization,\n        data: {\n          from: this.account.name,\n          to: this.contract.baccarat,\n          quantity,\n          memo,\n        },\n      }]\n    }, {\n      blocksBehind: 3,\n      expireSeconds: 30,\n    });\n\n    return result;\n  }\n\n  /**\n   * `cleos transfer inita bjpkten \"40.0000 EOS\" \"game_id:732628,bet_price:20000,bet_cnt:20,action:singlebet,item:1/0/3/1023/0/32/7/1/1/2,bet_memo:123fdsa\" -p inita`\n   */\n  async pk10Bet(quantity, betPrice, betCount, referrer, action, item) {\n    await this.waitInit();\n    const gameId = _.get(await this.gameGlobal('pk-10'), 'game_config.game_id');\n    const betMemo = 'qwert1234'; // TODO\n    const memo = `game_id:${gameId},bet_price:${betPrice},bet_cnt:${betCount},referrer:${referrer},action:${action},item:${item},bet_memo:${betMemo}`;\n\n    const result = await this.eos.transact({\n      actions: [{\n        account: 'eosio.token',\n        name: 'transfer',\n        authorization: this.transactionOptions.authorization,\n        data: {\n          from: this.account.name,\n          to: this.contract.pk10,\n          quantity,\n          memo,\n        },\n      }]\n    }, {\n      blocksBehind: 3,\n      expireSeconds: 30,\n    });\n\n    return result;\n  }\n}\n\nexport default EosClient;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAEA;;;;;;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;;;AAEA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AADA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AADA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;AAEA;;;;;AACA;AACA;AACA;;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;AACA;;AADA;AACA;AAEA;;;;;AAAA;AACA;;AACA;AAGA;AACA;AAAA;AAAA;AAAA;;AACA;AACA;;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AACA;AACA;AACA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AANA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;AAYA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;AACA;AACA;;AAAA;AACA;;AACA;;;;;AACA;AACA;AACA;;;AAEA;AACA;;AADA;AAEA;AACA;;;;;;;;;;;;;;;AAEA;;;;;;;;;AAGA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;AADA;AAOA;AACA;;;;;;;;;;;;;;;AAEA;;;;;;;;;AAGA;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AACA;;AADA;AAOA;AACA;AAAA;AAAA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;;AACA;AACA;;;AADA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;;AADA;AAUA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AADA;AAaA;AACA;AAFA;AACA;;AAbA;AAiBA;AACA;;;;;;;;;;;;;;;;;;;;AAEA;;;;;;;AACA;AACA;;;AAAA;AACA;;AADA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AADA;AAaA;AACA;AAFA;AACA;;AAbA;AAiBA;AACA;;;;;;;;;;;;;;;AAEA;;;;;;;;;AAGA;;;;;;;AACA;AACA;;AAAA;;AAAA;AACA;;;AADA;AACA;AACA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AADA;AAaA;AACA;AAFA;AACA;;AAbA;AAiBA;AACA;;;;;;;;;;;;;;;;;;;AAGA;;;;A","sourceRoot":""}