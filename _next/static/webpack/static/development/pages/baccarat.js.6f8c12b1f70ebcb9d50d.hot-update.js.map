{"version":3,"file":"static/webpack/static/development/pages/baccarat.js.6f8c12b1f70ebcb9d50d.hot-update.js","sources":["webpack:///./components/baccarat/game-table.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Grid } from '@material-ui/core';\nimport { withStyles } from '@material-ui/core/styles';\nimport PropTypes from 'prop-types';\nimport _ from 'lodash';\n\nimport Container from '../base-container';\nimport GameCounter from './game-counter';\n\nimport EosClient from '../../libs/eos-client';\nimport { actions, selectors } from '../../redux';\n\nimport { decodeBaccaratCard } from '../../libs/format-helper';\nimport errorParser from '../../libs/error-parser';\nimport TokenSelector from './token-selector';\nimport colors from '../../libs/styleguide/colors';\nimport t from '../../libs/i18n-util';\n\n/** @type {EosClient} */\nconst eosClient = EosClient.getInstance();\n\n@connect(({ baccarat, modal }) => ({ baccarat, modal }))\nclass PlayerArea extends React.Component {\n  static AREA_ID = {\n    playerWin: {\n      title: '閒',\n      titleColor: colors.blue,\n      odds: '1:1',\n      betItem: 'player',\n    },\n    playerPair: {\n      title: '閒對',\n      titleColor: colors.white,\n      odds: '1:11',\n      betItem: 'player_pair',\n      background: colors.pairBG,\n    },\n    bankerWin: {\n      title: '莊',\n      titleColor: colors.red,\n      odds: '1:0.95',\n      betItem: 'banker',\n    },\n    bankerPair: {\n      title: '莊對',\n      titleColor: colors.white,\n      odds: '1:11',\n      betItem: 'banker_pair',\n      background: colors.pairBG,\n    },\n    tie: {\n      title: '和',\n      titleColor: colors.mediumGreen,\n      odds: '1:8',\n      betItem: 'tie',\n    },\n  }\n\n  static WAGER_SOURCE = {\n    '0.1000 EOS': 'baccarat-game-token-0-1.svg',\n    '1.0000 EOS': 'baccarat-game-token-01.svg',\n    '5.0000 EOS': 'baccarat-game-token-05.svg',\n    '10.0000 EOS': 'baccarat-game-token-10.svg',\n    '50.0000 EOS': 'baccarat-game-token-50.svg',\n    '100.0000 EOS': 'baccarat-game-token-100.svg',\n    '500.0000 EOS': 'baccarat-game-token-500.svg',\n    '1000.0000 EOS': 'baccarat-game-token-1000.svg',\n    '5000.0000 EOS': 'baccarat-game-token-5000.svg',\n  };\n\n  static WAGER_TYPES = [\n    0.1000,\n    1.0000,\n    5.0000,\n    10.0000,\n    50.0000,\n    100.0000,\n    500.0000,\n    1000.0000,\n    5000.0000,\n  ]\n\n  state = {\n    currentBets: [],\n  }\n\n  componentDidUpdate() {\n    const betItem = PlayerArea.AREA_ID[this.props.areaId].betItem;\n    let currentBets = selectors.getBaccaratCurrentBets(this.props);\n    if (_.isArray(currentBets)) {\n      currentBets = currentBets.filter(({ item }) => item === betItem);\n      if (_.isEqual(this.state.currentBets, currentBets) === false) {\n        this.setState({ currentBets });\n      }\n    }\n  }\n\n  handlerOnClick = async () => {\n    this.props.dispatch(actions.modal.showLoading('betting...'));\n    const { areaId } = this.props;\n    const selectedToken = selectors.baccaratSelectedToken(this.props);\n\n    if (selectedToken === null) {\n      return;\n      //TODO\n    }\n    const betItem = PlayerArea.AREA_ID[areaId].betItem;\n    try {\n      const quantity = `${PlayerArea.WAGER_TYPES[selectedToken].toFixed(4)} EOS`;\n      const result = await eosClient.baccaratBet(quantity, 'baccarat', betItem);\n      console.log({ areaId, selectedToken, betItem, result });\n      actions.myBalanceUpdateFromRemote().then(balance => this.props.dispatch(balance));\n      this.props.dispatch(actions.modal.closeLoading());\n    } catch (error) {\n      console.error(error);\n      const rngError = errorParser(error);\n      this.props.dispatch(actions.modal.closeLoading());\n      this.props.dispatch(actions.modal.showError(rngError));\n    }\n  }\n\n  renderCurrentBets = (from = 0, end = 4) => {\n    return this.state.currentBets.slice(from, end).map( (e, index) =>{\n      const betTokenStyle = {\n        width: 40,\n      };\n\n      const wager = _.get(e, 'raw.meta.wager');\n      return (\n        <div key={from + index}>\n          <img src={`/static/img/baccarat/${PlayerArea.WAGER_SOURCE[wager]}`} style={betTokenStyle}/>\n        </div>\n      );\n    });\n  }\n\n  render() {\n    const { areaId, style } = this.props;\n    const { title, odds, titleColor, background } = PlayerArea.AREA_ID[areaId];\n\n    const baseStyles = {\n      borderStyle: 'solid',\n      borderColor: '#9a7b46',\n      textAlign: 'center',\n      borderRadius: 2,\n      borderWidth: 1,\n      background,\n    };\n    const containerStyle = Object.assign({}, baseStyles, style);\n\n    const styles = {\n      title: {\n        marginTop: 11,\n        color: titleColor,\n      },\n      odds: {\n        marginTop: 3,\n        color: colors.odds,\n      },\n    };\n    return (\n      <Grid container style={containerStyle} onClick={this.handlerOnClick}>\n        <Grid item xs={4}>\n          {this.renderCurrentBets(0, 3)}\n        </Grid>\n        <Grid item xs={4}>\n          <div style={styles.title}>{title}</div>\n          <div style={styles.odds}>{odds}</div>\n        </Grid>\n        <Grid item xs={4}>\n          {this.renderCurrentBets(3, 6)}\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\nPlayerArea.propTypes = {\n  areaId: PropTypes.string.isRequired,\n  style: PropTypes.object,\n  dispatch: PropTypes.func,\n};\n\nconst styles = {\n  root: {\n    height: 460,\n    borderRadius: 2,\n    borderStyle: 'solid',\n    borderColor: '#9a7b46',\n  },\n  dealArea: {\n    height: 130,\n    borderRadius: 2,\n    backgroundImage: 'linear-gradient(70deg, rgba(0, 0, 0, 0),\trgba(41, 202, 74, 0.5))',\n    textAlign: 'center',\n    position: 'relative',\n  },\n  dealAreaTitle: {\n    textAlign: 'center',\n    fontSize: 20,\n  },\n  dealAreaBaccaratWord: {\n    bottom: 5,\n    position: 'absolute',\n    width: '100%',\n  },\n  thirdCard: {\n    transform: 'rotate(90deg)',\n  },\n  playerWin: {\n    height: 150,\n  },\n  playerPair: {\n    height: 80,\n  },\n  bankerWin: {\n    height: 150,\n  },\n  bankerPair: {\n    height: 80,\n  },\n  tie: {\n    height: 160,\n  }\n};\n\n@connect(({ baccarat }) => ({ baccarat }))\nclass GameTable extends React.Component {\n\n  state = {\n    dealArea: {\n      playerCardSeat: [null, null, null],\n      bankerCardSeat: [null, null, null],\n    }\n  }\n\n  getCard = (cardNumber, isRotate = false) => {\n    const colors = ['spade', 'heart', 'diamond', 'club'];\n    const { rank, color } = decodeBaccaratCard(cardNumber);\n    const path = `${colors[color - 1]}${rank<10?'0'+rank:rank}`;\n    const style = isRotate ? { transform: 'rotate(90deg)' }: {};\n    return <img style = {style} src={`/static/img/baccarat/cards/${path}.svg`}/>;\n  }\n\n  componentDidMount() {\n    this.setState({\n      dealArea: {\n        playerCardSeat: [2, 5, 42].map((...params) => this.getCard(...params)),\n        bankerCardSeat: [9, 10, 25].map((...params) => this.getCard(...params)),\n      }\n    });\n\n  }\n\n  // componentDidUpdate(prevProps) {\n  //   const previousBaccaratGameStatus = selectors.getBaccaratGameStatus(prevProps);\n  //   const currentBaccaratGameStatus = selectors.getBaccaratGameStatus(this.props);\n\n  //   // console.log('[GameTable]', { previousBaccaratGameStatus, currentBaccaratGameStatus });\n  //   // game state changed\n  //   if (currentBaccaratGameStatus && previousBaccaratGameStatus &&\n  //     previousBaccaratGameStatus.gameState !== currentBaccaratGameStatus.gameState) {\n\n  //     switch (currentBaccaratGameStatus.gameState) {\n  //     case 'BACCARAT_GAME_STATE_RESULT': {\n  //       const bankerCard = currentBaccaratGameStatus.gameResult.banker_card;\n  //       const playerCard = currentBaccaratGameStatus.gameResult.player_card;\n\n  //       this.setState({\n  //         dealArea: {\n  //           playerCardSeat: playerCard.map(cardNumber=>this.getCard(cardNumber)),\n  //           bankerCardSeat: bankerCard.map(cardNumber=>this.getCard(cardNumber)),\n  //         }\n  //       });\n  //       break;\n  //     }\n  //     default: {\n  //       this.setState({\n  //         dealArea: {\n  //           playerCardSeat:[],\n  //           bankerCardSeat:[],\n  //         }\n  //       });\n  //     }\n  //     }\n  //   }\n  // }\n\n  render() {\n    const { classes } = this.props;\n\n    return (\n      <Container style={styles.root}>\n        <div className={classes.dealArea}>\n          <div className={classes.dealAreaTitle}>\n            <span>{t('player')}</span>\n            <span style={{ marginLeft: 20 }}></span>\n            <span>{t('banker')}</span>\n          </div>\n          <div className={classes.dealAreaBaccaratWord}>\n            <img src=\"/static/img/baccarat/baccarat_word.svg\"></img>\n          </div>\n          <Grid container>\n            <Grid item xs={5}>\n              <Grid container>\n                <Grid item xs={6}>\n                  {this.state.dealArea.playerCardSeat[0]}\n                </Grid>\n                <Grid item xs={6}>\n                  {this.state.dealArea.playerCardSeat[1]}\n                </Grid>\n              </Grid>\n              <div className={classes.thirdCard}>\n                {this.state.dealArea.playerCardSeat[2]}\n              </div>\n            </Grid>\n            <Grid item xs={2}>\n            </Grid>\n            <Grid item xs={5}>\n              <Grid container>\n                <Grid item xs={6}>\n                  {this.state.dealArea.bankerCardSeat[0]}\n                </Grid>\n                <Grid item xs={6}>\n                  {this.state.dealArea.bankerCardSeat[1]}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </div>\n        <Grid container>\n          <Grid item xs={5}>\n            <PlayerArea areaId={'playerWin'} style={styles.playerWin}/>\n            <PlayerArea areaId={'playerPair'} style={styles.playerPair}/>\n          </Grid>\n          <Grid item xs={2}>\n            <GameCounter/>\n            <PlayerArea areaId={'tie'} style={styles.tie}/>\n          </Grid>\n          <Grid item xs={5}>\n            <PlayerArea areaId={'bankerWin'} style={styles.bankerWin}/>\n            <PlayerArea areaId={'bankerPair'} style={styles.bankerPair}/>\n          </Grid>\n        </Grid>\n        <TokenSelector/>\n      </Container>\n    );\n  }\n}\n\nGameTable.propTypes = {\n  classes: PropTypes.object\n};\n\nexport default withStyles(styles)(GameTable);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AA6DA;AACA;AADA;AACA;;;;;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AADA;AASA;AATA;AAWA;AAXA;AAAA;AACA;AADA;AAYA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAhBA;AAAA;AACA;AADA;AAAA;AAAA;AAiBA;AACA;AACA;AAAA;AACA;AAAA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AAAA;AAAA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;AAjDA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;;;AAyCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;AAUA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAKA;;;;AAxJA;AAEA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AAJA;AA3BA;AAoCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAuHA;AACA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AAFA;AAIA;AACA;AACA;AACA;AAHA;AAKA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAGA;AACA;AADA;AAtCA;AA4CA;AADA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAGA;AACA;AACA;AACA;AAFA;AADA;AACA;AAMA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;;;;;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AADA;AAOA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAIA;AAAA;AAIA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAAA;AAOA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAMA;;;;AAxHA;AA2HA;AACA;AADA;AAIA;;;;A","sourceRoot":""}