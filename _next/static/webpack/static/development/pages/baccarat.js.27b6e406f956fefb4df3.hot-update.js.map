{"version":3,"file":"static/webpack/static/development/pages/baccarat.js.27b6e406f956fefb4df3.hot-update.js","sources":["webpack:///./pages/baccarat/m.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport moment from 'moment';\nimport _ from 'lodash';\n\nimport Head from '../../components/head';\nimport Container from '../../components/base-container';\nimport HeaderStatus from '../../components/header-status';\nimport { AppNavBar, Loader, ErrorModal, LoadingModal } from '../../components/common';\n\nimport ContractObserver from '../../libs/contract-observer';\nimport { actions, selectors } from '../../redux';\n\nimport {\n  GameHead,\n  GameTable,\n  GameResultModal,\n  History,\n} from '../../components/baccarat';\nimport { getBaccaratGameHistory } from '../../libs/api';\n\n@connect(({ baccarat, account, modal }) => ({ baccarat, account, modal }))\nclass Baccarat extends React.Component {\n  contractObserver = null\n\n  state = {\n    eosClient: null,\n  }\n\n  updateCountdown = () => {\n    let gameConfig = selectors.getBaccaratGameConfig(this.props);\n    let timeEnd = _.get(gameConfig, 'time_end');\n    if (timeEnd) {\n      timeEnd = moment(timeEnd).utcOffset(0, true); // set the endTime to UTC+0\n      const diff = timeEnd.diff(moment());\n      const countdown = moment.utc(Math.max(0, diff)).format('mm:ss');\n      this.setState({ countdown });\n    }\n  }\n\n  replaceHistory = async () => {\n    const historyFromRemote = await getBaccaratGameHistory();\n    this.props.dispatch(actions.baccaratReplaceHistory(historyFromRemote));\n  }\n\n  componentDidMount () {\n    this.replaceHistory();\n\n    const contractObserver = ContractObserver.getInstance();\n    contractObserver.onAccount((error, account) => {\n      if (error) {\n        // eslint-disable-next-line\n          return console.error(error);\n      }\n      if (account && _.isEqual(account, selectors.account(this.props)) === false) {\n        this.props.dispatch(actions.updateAccount(account));\n      }\n    });\n\n    contractObserver.onBaccarat((error, result) => {\n      if (error) {\n        // eslint-disable-next-line\n        return console.error(error);\n      }\n      const { gameGlobal, gameResult, currentBets } = result;\n      // console.log('[onBaccarat]', 'result = ', result, this.props.baccarat);\n\n      if (_.isEmpty(gameResult) === false) {\n        if (_.isEqual(gameResult, selectors.getBaccaratGameResult(this.props)) === false) {\n          this.props.dispatch(actions.baccaratFinishGame(gameResult));\n        }\n      } else {\n        const gameConfigFromState = selectors.getBaccaratGameConfig(this.props) || {};\n        const gameConfigFromRpc = _.get(gameGlobal, 'game_config');\n        if (_.isEqual(gameConfigFromRpc, gameConfigFromState) === false) {\n          if (_.isNumber(gameConfigFromRpc.round_id) &&\n              _.isNumber(gameConfigFromState.round_id) &&\n              gameConfigFromRpc.round_id !== gameConfigFromState.round_id) {\n            this.props.dispatch(actions.baccaratReplaceHistory([]));\n          }\n          this.props.dispatch(actions.baccaratNewGame(gameGlobal));\n          actions.myBalanceUpdateFromRemote().then(action => this.props.dispatch(action));\n        }\n      }\n\n      if (_.isEqual(currentBets, selectors.getBaccaratCurrentBets(this.props)) === false) {\n        this.props.dispatch(actions.baccaratUpdateCurrentBets(currentBets));\n      }\n    }, 2 * 1000);\n\n    setInterval(this.updateCountdown, 500);\n  }\n\n  render() {\n    const { error, loading } = selectors.modal(this.props);\n    return (\n      <Loader>\n        <Head title=\"Baccarat\" />\n        <AppNavBar gameType=\"baccarat\" betsHref=\"/baccarat/bets\"/>\n        <br/>\n        <Container>\n          <HeaderStatus gameType='baccarat'/>\n        </Container>\n        <br/>\n        <Container>\n          <History/>\n        </Container>\n        <br/>\n        <Container>\n          <GameHead/>\n        </Container>\n        <br/>\n        <GameTable/>\n        <GameResultModal/>\n        <ErrorModal open={error.open} error={error.content}/>\n        <LoadingModal open={loading.open} text={loading.content}/>\n      </Loader>\n    );\n  }\n}\nBaccarat.propTypes = {\n  dispatch: PropTypes.func,\n};\n\nexport default Baccarat;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AAGA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AADA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AACA;AACA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;AAIA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAAA;AAGA;AAAA;AAaA;AAAA;AAAA;AACA;AAAA;AAAA;AAGA;;;;AAhGA;AAkGA;AACA;AADA;AAIA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}